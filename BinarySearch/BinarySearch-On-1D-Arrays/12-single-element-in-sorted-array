class Solution {
    public int singleNonDuplicate(int[] nums) {
        // If the array has only one element, return that element
        if (nums.length == 1) {
            return nums[0];
        }

        // Check if the first element is the unique one
        if (nums[0] != nums[1]) {
            return nums[0];
        }

        // Check if the last element is the unique one
        if (nums[nums.length - 1] != nums[nums.length - 2]) {
            return nums[nums.length - 1];
        }

        // Initialize binary search range, excluding the first and last elements
        int start = 1, end = nums.length - 2;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            // Check if the mid element is the unique one by comparing it with its neighbors
            if (nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1]) {
                return nums[mid];
            }

            // Determine which half to search next based on the position of mid and its pair
            // If mid is odd and nums[mid] == nums[mid - 1], the single element is in the right half
            // If mid is even and nums[mid] == nums[mid + 1], the single element is in the right half
            // Otherwise, the single element is in the left half
            if ((mid % 2 == 1 && nums[mid] == nums[mid - 1]) || 
                (mid % 2 == 0 && nums[mid] == nums[mid + 1])) {
                start = mid + 1; // Move the start pointer to search in the right half
            } else {
                end = mid - 1; // Move the end pointer to search in the left half
            }
        }

        // If no unique element is found, return -1 (this case should not occur with valid input)
        return -1;
    }
}

/* 
Explanation of the (even, odd) pair condition:
- The array is sorted, and every element except one appears exactly twice.
- For any index 'mid':
  - If 'mid' is odd and nums[mid] == nums[mid - 1], it means pairs are correctly formed up to 'mid',
    so the single element must be in the right half.
  - If 'mid' is even and nums[mid] == nums[mid + 1], it means pairs are correctly formed up to 'mid',
    so the single element must be in the right half.
  - Otherwise, the single element is in the left half.
This condition helps in narrowing down the search space to find the single unique element.
*/
